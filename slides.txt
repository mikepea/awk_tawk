.
.
.
.
.
.
                        ___        ___  __
                       / \ \      / / |/ /
                      / _ \ \ /\ / /| ' /
                     / ___ \ V  V / | . \
                    /_/   \_\_/\_/  |_|\_\
.
                   _____  ___        ___  __
                  |_   _|/ \ \      / / |/ /
                    | | / _ \ \ /\ / /| ' /
                    | |/ ___ \ V  V / | . \
                    |_/_/   \_\_/\_/  |_|\_\
.
                              by
.
                           @mikepea

@last
.
.
         WARNING: This tawk repeatedly uses the word 'orgy',
                  in an historical context. Sorry.

.
.
.
.
.
.
.
.
.
                          AWK? WUT?
                          ---------
.
                          *
                          *
                Alfred V. Aho
                 Peter J. Weinberger
                 Brian W. Kernighan
                          *
                          *
.
                          * 1977 *

@last
.
      The year:
.


@last
       - Star Wars released


@last
       - Apple Computer, Inc incorporates


@last
       - the Sex Pistols get in huge trouble for swearing a bit on TV


.
                      A Bit Of History
                      ----------------
.


@last
    1970: Unics is born.



@last
    1971: man pages appear
.

@last
    1973: Unix pipelines invented, creating the Unix Philosophy,
          and 'an unforgettable orgy of one-liners'.
          Doug McIlroy <3

@last
.
    1979: Unix 7th Edition. Has Bourne Shell, grep, sed.

@last
.
                            AND AWK!

@last
.
    1979: vi appears on the scene.

@last
.
    1986: 4.3BSD released.
          'The Greatest Software Ever Written', according to some.

@last
    1990: Web is born.

@last
.
    1994: mikepea writes his first program in AWK.
          A menu system for a helpdesk at $firstjob.


.
.
.
.
.
.
.
.
.
                    System Error
                    ------------
.
                    MIND BLOWN

.
.
.
.
.
.
.
.
.
                    SOME TIME PASSES
                    ----------------

.
.
.
.
.
.
.
                   Rough format my^Wmost peoples AWK nowadays
                   ------------------------------------------
.
.
                   grep ' 200 ' $log | awk '{print $3}'

@last
.
.
                          or maybe...
.
.
                   awk '/ 200 / {print $3}' $log # OMG
.
.

@last
                          or maybe...
.
.
                   awk '$7 == 200 {print $3}' $log # OMG OMG


.
.
.
                   Understand awk a bit betterer
                   -----------------------------
.
                   awk '{program}' input_files
                   awk -f {script} input_files
.
                   ... where a program looks like:

@last
.
                   BEGIN {
                     # do initialisation stuff
                   }

@last
                   expression {
                     # do stuff on records matching expression
                     # eg '$3 > 200'; '$4 !~ /foo/'
                     # can also be compound, with
                     # logical &&, ||, ! etc.
                   }

@last
                   /regex/ {
                     # do stuff on records matching regex
                   }

@last
                   /from/,/to/ {
                     # do stuff on records between regexes
                   }

@last
                   END {
                     # finish up. Like print a summary.
                   }


.
.
.
.
.
.
.
                   Some common 'variables'
                   -----------------------
.
.
             $1 .. $n   - field references
             $i         - field referenced by integer i

@last
.
             NR         - number of records in input
             NF         - number of fields in record
             $NF        - last field in record

@last
.
             RS         - input record seperator (default \n)
             FS         - input field seperator (default whitespace)

.
.
.
.
.
.
.
                          WHY EVEN?
                          ---------


@last
.
                     Blame Bryan Cantrill


@last
.
             The AWK Programming Language, 1988

@last
.
             <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3
             <3                               <3
             <3 Typeset using a DEC VAX 8550  <3
             <3     running 9th ed. UNIXÂ®     <3
             <3                               <3
             <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3






.
                   An Orgy Of One-Liners
                   ---------------------
.
   awk 'END { print NR }'     # wc -l

@last
   awk 'NR == 10'             # print 10th line

@last
   awk '{ print $NF }'        # print last field of every line

@last
   awk 'NF > 4'               # print lines with more than 4 fields

@last
   awk '$NF > 4'              # print lines where last field is more than 4

@last
.
   # convert a tab-separated file to a comma-separated file
   awk 'BEGIN { FS="\t"; OFS="," } {$1=$1; print}' file.tsv > file.csv

@last
.
   # print number of lines matching 'Foo'
   awk '/Foo/ { nlines = nlines + 1 } END {print nlines}'

@last
.
   # print max value of first field
   awk '$1 > max { max = $1 } END {print max}'

@last
.
   awk 'length($0) > 80'      # print lines >80 chars

@last
   awk '{ $1 = NR; print}'    # replace first field with line number

@last
   awk '{ $2 = ""; print}'    # erase the second field


             The AWK Programming Language, 1988
             ----------------------------------
.
           An absolute delight of a technical book

@last
.
           Still amazingly current. Awk has changed (gawk, nawk)
           but is still fundamentally the same language.

@last
.
           Has got an 'Algorithms' section! Interview answers in AWK!

@last
.
           Has a chapter on writing DSLs, which it calls
           'Little Langauges' <3

@last
.
           Has a section on creating a RDBMS in AWK, with a custom
           query language!

.
.
.
.
                                                    _
                 _ __ ___  __ _  _____  ___ __  ___| |
                | '__/ _ \/ _` |/ _ \ \/ / '_ \/ __| |
                | | |  __/ (_| |  __/>  <| |_) \__ \_|
                |_|  \___|\__, |\___/_/\_\ .__/|___(_)
                          |___/          |_|
.
                 OMG! THEY'RE SO NEW AND EXCITING! (*)

@last
.
.
.
 (*) actually invented in 1956 by Stephen Cole Kleen, a mathematician
.
      ... and then repurposed by all those clever Unix folks.
.
.
.


                   Regexps in AWK
                   --------------

                 * Basically no different to sed/grep
                 * No submatch variables :(
                   i.e. (.+) => \1 in sed
.
                 * I'm amazed at how little they've changed
                   since 1988





                   How did I not know about printf?
                   --------------------------------
.
.
                   * Works just like regular printf
                   * sprintf is also available.



                   Arrays
                   ------
.
.
                   * one dimensional, though the book gives
                     a workaround (and this may be a feature of
                     modern awk?)
.
                   arr["thing"] = value
.
                   records[NR] = $0
.
                   for (key in arr) {
                     print key, arr[key]
                   }
.
                   split($1, arr, ",")
.
                   if arr[key] > 500
                     delete arr[key]


                   Common built-in functions
                   -------------------------
.
.
           sub(/regex/,s)     # leftmost sub in $0
           sub(/regex/,s,t)   # leftmost sub in t
.
           gsub(/regex/,s)    # global sub in $0
           gsub(/regex/,s,t)  # global sub in t
.
           substr(s,p)        # return suffix of s, at pos p
           substr(s,p,n)      # return substr of s, len n, at pos p
.
           index(s,t)         # return pos of string t in s. 0 otherwise
           length(s)          # return length of string
           match(s,/regex/)   # return index of match or 0 if not.
.
           sprintf(fmt, expr-list)  # as you're used to
.


                   Custom functions are a thing
                   ----------------------------
.
.
                   * As you'd expect, but have never used.
                   * variables are passed as a copy
                   * arrays are passed by reference
.
                   function add(arg1, arg2) {
                     return arg1 + arg2
                   }
.
                   function sum_and_delete(arr) {
                     for (k in arr) {
                       sum = sum + arr[k]
                       delete arr[k] # mutates arr
                     }
                     return sum
                   }
.
.


                   Interation with other programs
                   ------------------------------
.
.
                   * system() works as you'd expect
.
                   system("cat " $2)
.
                   * also can use a pipe!
.
                   while ("who" | getline) {
                     num_users++
                   }
.
.
                   print $0 | "sort -r"
.
.




                   AWK Gotchas
                   -----------
.
.
                   * 'print' on its own prints $0 (the record)
                   * variables don't use $
                     '$' indicates 'field', eg (i=1;$i) == $1
                   * scope TODO
                   * ...


                   Some less used variables
                   ------------------------

@last
.
             ORS        - output record seperator (default \n)
             OFS        - output field seperator (default whitespace)

@last
.
             FILENAME   - name of the file being worked on
                          (when list of files given as ARGV)
             FNR        - number of records read from current file

@last
.
             ENVIRON    - Array for accessing envvars,
                          eg ENVIRON["USER"]
                          ('modern' awk only)

.
.
.
.
.
.
.
                   This presentation was
                      brought to you
                      by the letters

@last
.
                           A,

@last
                           W,

@last
                         & K

!awk '{print "       ",$0}' present.awk

!awk 'BEGIN { for (i=0;i<300;i++) {printf(" THANKYOU ")} }'
